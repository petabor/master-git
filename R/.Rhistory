## add the inference prop to premise
dataset_ts =
dataset_ts %>%
filter(
pairType == "premise"
)
dataset_ts_all =
full_join(
dataset_ts, dataset_ts_collapse
) %>%
mutate(
pairType = as_factor(pairType),  ## change to factors
participant = as_factor(participant),
condition = as_factor(condition)
) %>%
arrange(
participant
)
}
## applying the function = fc_inf_prem_ts
df_inf_prem_ts = fc_inf_prem_ts(ts_tot_trim)
source(here::here("/Functions.R"))
df_inf_prem_ts = fc_inf_prem_ts(ts_tot_trim)
source(here::here("/Functions.R"))
## applying the function = fc_inf_prem_ts
df_inf_prem_ts = fc_inf_prem_ts(ts_tot_trim)
View(df_inf_prem_ts)
source(here::here("/Functions.R"))
## applying the function = fc_inf_prem_ts
df_inf_prem_ts = fc_inf_prem_ts(ts_tot_trim)
View(df_inf_prem_ts)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
View(df_prem_middle_ts)
source(here::here("/Functions.R"))
## applying the function = fc_deg_ts
df_deg_ts = fc_deg_ts(ts_tot_trim)
View(df_deg_ts)
df_prem_middle_ts_wide =
spread(df_prem_middle_ts, pairType)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
spread(pairType)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
spread(pairType, prop)
View(df_prem_middle_ts_wide)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
spread(lettPos, prop)
View(df_prem_middle_ts_wide)
View(df_prem_middle_ts)
View(df_prem_middle_ts)
aov_temp <- aov_ez(
"participant",
"prop",
data = myData,
between = c("condition"),
within = c("pairType"),
type = 3
)
aov_temp <- aov_ez(
"participant",
"prop",
data = df_prem_middle_ts,
between = c("condition"),
within = c("pairType"),
type = 3
)
aov_temp$data$wide
aov_temp = aov_temp$data$wide
View(aov_temp)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
gather(
"B_D", "D_B", "C_E", "E_C", "B_E", "E_B"
)
df_prem_middle_ts_wide =
gather(
"B_D", "D_B", "C_E", "E_C", "B_E", "E_B"
)
View(df_prem_middle_ts_wide)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
gather(
"B_D", "D_B", "C_E", "E_C", "B_E", "E_B", key = lettPos, value = tot
)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
group_by(participant) %>%
mutate(temp = 1:n())
View(df_prem_middle_ts_wide)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
gather("lettPos", "pairType", key = variable, value = tot)
View(df_prem_middle_ts_wide)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
gather("lettPos", "pairType", key = variable, value = number)
View(df_prem_middle_ts_wide)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
gather("lettPos", "pairType", key = variable, value = number) %>%
unite(combi, variable, temp)
View(df_prem_middle_ts_wide)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
gather("lettPos", "pairType", key = variable, value = number) %>%
unite(combi, variable, temp) %>%
spread(combi, number)
View(df_prem_middle_ts_wide)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
gather("B_D", "D_B", "C_E", "E_C", "B_E", "E_B", key = lettPos, value = tot) %>%
unite(combi, variable, temp) %>%
spread(combi, number)
source(here::here("/Functions.R"))
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
gather("B_D", "D_B", "C_E", "E_C", "B_E", "E_B", key = lettPos, value = tot)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
unite(combi, lettPos, temp) %>%
spread(combi, tot)
View(other_collapse_middPrem)
View(df_prem_middle_ts_wide)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
filter(-c("prop"))
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
filter(-c("prop"))
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
dplyr::select(-c(prop))
View(df_prem_middle_ts_wide)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
dplyr::select(-c(prop)) %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
unite(combi, lettPos, temp) %>%
spread(combi, tot)
View(df_prem_middle_ts_wide)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
dplyr::select(-c(prop, pairType)) %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
unite(combi, lettPos, temp) %>%
spread(combi, tot)
View(df_prem_middle_ts_wide)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
dplyr::select(-c(prop, pairType)) %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
unite(combi, lettPos, temp) %>%
spread(combi, tot/n)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
dplyr::select(-c(pairType)) %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
unite(combi, lettPos, temp) %>%
spread(combi, prop)
View(df_prem_middle_ts_wide)
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide =
df_prem_middle_ts %>%
dplyr::select(-c(pairType, tot)) %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
unite(combi, lettPos, temp) %>%
spread(combi, prop)
View(df_prem_middle_ts_wide)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(prop, lettPos)) %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
unite(combi, pairType, temp) %>%
spread(combi, tot)
View(df_prem_middle_ts_wide_avg)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(prop, lettPos))
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(prop, lettPos))
View(df_prem_middle_ts_wide)
View(df_prem_middle_ts)
View(df_prem_middle_ts)
df_prem_middle_ts
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(prop, lettPos))
df_prem_middle_ts_wide_avg
df_prem_middle_ts
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(prop))
df_prem_middle_ts_wide_avg
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop))
source(here::here("/Functions.R"))
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop))
View(other_collapse_middPrem)
View(df_prem_middle_ts_wide_avg)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop)) %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
unite(combi, pairType, temp) %>%
spread(combi, tot)
View(df_prem_middle_ts_wide_avg)
View(df_prem_middle_ts)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop)) %>%
group_by(participant, pairType) %>%
dplyr::summarise(
tot = sum(tot),
n = sum(n)
)
View(df_prem_middle_ts_wide_avg)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop)) %>%
group_by(participant) %>%
dplyr::summarise(
tot = sum(tot),
n = sum(n)
)
View(df_prem_middle_ts_wide_avg)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop)) %>%
group_by(participant, pairType, condition) %>%
dplyr::summarise(
tot = sum(tot),
n = sum(n)
)
View(df_prem_middle_ts_wide_avg)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop)) %>%
group_by(participant, pairType, condition) %>%
dplyr::summarise(
tot = sum(tot),
n = sum(n)
) %>%
mutate(prop = tot/n)
View(df_prem_middle_ts_wide_avg)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop)) %>%
group_by(participant, pairType, condition) %>%
dplyr::summarise(
tot = sum(tot),
n = sum(n)
) %>%
mutate(prop = tot/n) %>%
spread(pairType, prop)
View(df_prem_middle_ts_wide_avg)
aov_temp
## wide format for middle premise pairs and inference, averaged together
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop)) %>%
group_by(participant, pairType, condition) %>%
dplyr::summarise(
tot = sum(tot),
n = sum(n)
) %>%
mutate(prop = tot/n) %>%
group_by(participant, condition) %>%
spread(pairType, prop)
View(df_prem_middle_ts_wide_avg)
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop)) %>%
group_by(participant, pairType, condition) %>%
dplyr::summarise(
tot = sum(tot),
n = sum(n)
) %>%
mutate(prop = tot/n) %>%
dplyr::select(-c(tot, n)) %>%
spread(pairType, prop)
View(df_prem_middle_ts_wide_avg)
View(aov_temp)
source(here::here("/Functions.R"))
## applying the function = df_prem_middle_ts
df_prem_middle_ts = fc_inf_premMiddle_ts(ts_tot_trim)
head(df_prem_middle_ts)
## wide format of individual pairs - if I want to explore closer the types
## proportions calculated for individual pair from total number of blocks
df_prem_middle_ts_wide_each =
df_prem_middle_ts %>%
dplyr::select(-c(pairType, tot)) %>%
group_by(participant) %>%
mutate(temp = 1:n()) %>%
unite(combi, lettPos, temp) %>%
spread(combi, prop)
## wide format for middle premise pairs and inference, averaged together
df_prem_middle_ts_wide_avg =
df_prem_middle_ts %>%
dplyr::select(-c(lettPos, prop)) %>%
group_by(participant, pairType, condition) %>%
dplyr::summarise(
tot = sum(tot),
n = sum(n)
) %>%
mutate(prop = tot/n) %>%
dplyr::select(-c(tot, n)) %>%
spread(pairType, prop)
## training export - cleaned, but not subset
write_csv(
tr_tot_trim,
here("outputFiles_R", "tr_tot_trim.csv")
)
## testing export - cleaned, but not subset
write_csv(
ts_tot_trim,
here("outputFiles_R", "ts_tot_trim.csv")
)
## subset of premise and inference with proportion
write_csv(
df_inf_prem_ts,
here::here("outputFiles_R", "df_inf_prem_ts.csv")
)
## subset of one degree and two degree
write_csv(
df_deg_ts,
here::here("outputFiles_R", "df_deg_ts.csv")
)
## subset of premise and inference - premise only middle pairs
write_csv(
df_prem_middle_ts,
here::here("outputFiles_R", "df_prem_middle_ts.csv")
)
## simulated data
write_csv(
myData,
here::here("outputFiles_R", "myData.csv")
)
## data set with each individual middle premise and inference pairs
write_csv(
df_prem_middle_ts_wide_each,
here::here("outputFiles_R", "df_prem_middle_ts_wide_each.csv")
)
## data set with averaged middle premise pairs and inference
write_csv(
df_prem_middle_ts_wide_avg,
here::here("outputFiles_R", "df_prem_middle_ts_wide_avg.csv")
)
df_prem_middle_ts_wide_each = read.csv(here::here("outputFiles_R", "df_prem_middle_ts_wide_each.csv"))
df_prem_middle_ts_wide_avg = read.csv(here::here("outputFiles_R", "df_prem_middle_ts_wide_avg.csv"))
head(df_prem_middle_ts_wide_avg)
pairType_lm = lm(inference ~ midd_prem*condition, data = df_prem_middle_ts_wide_avg)
summary(pairType_lm)
## bonferroni
contrast(compar, method = "pairwise", adjust = "bonferroni")
## pairwise comparisons
compar = lsmeans(aov_pilot, specs = c("condition"))
aov_pilot <- aov_ez(
"participant",
"prop",
data = ts_first_selected,
between = c("condition"),
within = c("pairType"),
type = 3
)
summary(aov_pilot)
## pairwise comparisons
compar = lsmeans(aov_pilot, specs = c("condition"))
## bonferroni
contrast(compar, method = "pairwise", adjust = "bonferroni")
## pairwise comparisons
compar = lsmeans(aov_pilot, specs = c("condition"))
?lsmeans
compar
compar_pair = lsmeans(aov_pilot, specs = c("condition", "pairType"))
compar_pair
compar_pair_cond = lsmeans(aov_pilot, specs = c("condition", "pairType"))
contrast(compar_pair_cond, method = "pairwise", adjust = "bonferroni")
aov_simDat
aov_simDat <- aov_ez(
"subject",
"perf",
data = myData,
between = c("condition"),
within = c("pairType"),
type = 3
)
aov_simDat
## pairwise comparison - sim data
sim_data_pair_cond = lsmeans(aov_simDat, specs =  c("condition", "pairType"))
sim_data_pair_cond
## bonferroni - sim data
contrast(sim_data_pair_cond, method = "pariwise", adjust = "bonferroni")
## bonferroni - sim data
contrast(sim_data_pair_cond, method = "pairwise", adjust = "bonferroni")
## bonferroni - sim data
contrast(sim_data_pair_cond, method = "pairwise", adjust = "bonferroni")
View(df_deg_ts)
aov_pilot
ts_first_selected
View(ts_first_selected)
leveneTest(prop ~ condition, data = ts_first_selected, center = mean)
library(car)
leveneTest(prop ~ condition, data = ts_first_selected, center = mean)
## levenetest
test_levene(aov_pilot, center = mean) ## not significant is good
## levenetest - version two, so I can see what I'm entering, only between subject
leveneTest(prop ~ condition, data = ts_first_selected, center = mean)
## bonferroni
contrast(compar, method = "pairwise", adjust = "bonferroni")
contrast(compar_pair_cond, method = "pairwise", adjust = "bonferroni")
pair.t_pilot =
ts_first_selected %>%
pairwise_t_test(prop ~ group, paired = FALSE, p.adjust.methods = "bonferroni")
pair.t_pilot =
ts_first_selected %>%
pairwise_t_test(prop ~ condition, paired = FALSE, p.adjust.methods = "bonferroni")
library(tidyverse)
pair.t_pilot =
ts_first_selected %>%
pairwise_t_test(prop ~ condition, paired = FALSE, p.adjust.methods = "bonferroni")
# install.packages("here")
# install.packages("tidyverse")
# devtools::install_github("hadley/emo")
# install.packages("viridis")
# devtools::install_github("mikabr/ggpirate")
# install.packages("afex")
# install.packages("bootES")
# install.packages("ez")
# install_github("rakosnicek/additivityTests")
# install.packages("Rmisc")
install.packages(""rstatix)
# install.packages("here")
# install.packages("tidyverse")
# devtools::install_github("hadley/emo")
# install.packages("viridis")
# devtools::install_github("mikabr/ggpirate")
# install.packages("afex")
# install.packages("bootES")
# install.packages("ez")
# install_github("rakosnicek/additivityTests")
# install.packages("Rmisc")
install.packages("statix")
install.packages("installr")
library(installr)
updateR()
# install.packages("here")
# install.packages("tidyverse")
# devtools::install_github("hadley/emo")
# install.packages("viridis")
# devtools::install_github("mikabr/ggpirate")
# install.packages("afex")
# install.packages("bootES")
# install.packages("ez")
# install_github("rakosnicek/additivityTests")
# install.packages("Rmisc")
install.packages("statix")
