"0","## sd total"
"0","sd_tot ="
"0","        df_inf_prem_ts %>%"
"0","        dplyr::summarise("
"0","                sd_tot = sd(prop)"
"0","        ) %>%"
"0","        pull()"
"0","## creating the tresholds for each group - vary then"
"0","w_prem_th = 0.98"
"0","w_inf_th = 0.55"
"0","s_prem_th = 0.98"
"0","s_inf_th = 0.85"
"0","## double checking means"
"0","mean_w_prem = 0"
"0","mean_w_inf = 0"
"0","mean_s_prem = 0"
"0","mean_s_inf = 0"
"0","## loop paramaters"
"0","nr_sim = 200"
"0","p_value = 0"
"0","set.seed(123)"
"0","## parameters"
"0","nuSubj = 40"
"0","nrCond_bet = 2"
"0","nrCond_wth = 2"
"0","cond_bet = c(""wake"", ""sleep"")"
"0","cond_wth = c(""premise"", ""inference"")"
"0","myData = tibble()"
"0","for(j in 1:nr_sim){"
"0","        "
"0","        ## subject"
"0","        subject = rep(1:nuSubj, times = nrCond_bet)"
"0","        ## create IV within"
"0","        pair = rep(cond_wth, times = nuSubj)"
"0","        ## create IV between"
"0","        cond = rep(cond_bet, each = nrCond_bet, times = nuSubj/nrCond_bet)"
"0","        "
"0","        ## create empty tibble (to reset previous)"
"0","        myData = tibble(condition = cond, pairType = pair)"
"0","        "
"0","        ## arrange to pair type and condition so the dv is added appropriately"
"0","        myData ="
"0","                myData %>%"
"0","                arrange("
"0","                        pairType,"
"0","                        condition"
"0","                )"
"0","        "
"0","        ## creating a sample of each treshold"
"0","        ## random sample with mean and sd from pilot data in range 0 and 1"
"0","        w_inf = rnorm(nuSubj/nrCond_bet, w_inf_th, sd_tot)"
"0","        for(a in 1:length(w_inf)){"
"0","                #print(w_inf[i])"
"0","                if(w_inf[a] >= 1){"
"0","                        w_inf[a] = 1"
"0","                } else if(w_inf[a] <= 0){"
"0","                        w_inf[a] = 0"
"0","                }"
"0","        }"
"0","        "
"0","        "
"0","        w_prem = rnorm(nuSubj/nrCond_bet, w_prem_th, sd_tot)"
"0","        for(b in 1:length(w_prem)){"
"0","                #print(w_inf[i])"
"0","                if(w_prem[b] >= 1){"
"0","                        w_prem[b] = 1"
"0","                } else if(w_inf[b] <= 0){"
"0","                        w_prem[b] = 0"
"0","                }"
"0","        }"
"0","        "
"0","        "
"0","        s_inf = rnorm(nuSubj/nrCond_bet, s_inf_th, sd_tot)"
"0","        for(c in 1:length(s_inf)){"
"0","                #print(w_inf[i])"
"0","                if(s_inf[c] >= 1){"
"0","                        s_inf[c] = 1"
"0","                } else if(w_inf[c] <= 0){"
"0","                        s_inf[c] = 0"
"0","                }"
"0","        }"
"0","        "
"0","        "
"0","        s_prem = rnorm(nuSubj/nrCond_bet, s_prem_th, sd_tot)"
"0","        for(d in 1:length(s_prem)){"
"0","                #print(w_inf[i])"
"0","                if(s_prem[d] >= 1){"
"0","                        s_prem[d] = 1"
"0","                } else if(s_prem[d] <= 0){"
"0","                        s_prem[d] = 0"
"0","                }"
"0","        }"
"0","        "
"0","        ## performance bind - the order is dependent on the arrangment before"
"0","        perf = c(s_inf, w_inf, s_prem, w_prem)"
"0","        "
"0","        ## add performance"
"0","        myData <- "
"0","                myData %>%"
"0","                add_column("
"0","                        perf = perf, .after = ""pairType"""
"0","                ) "
"0","        "
"0","        # convert to factor"
"0","        myData <- "
"0","                myData %>%"
"0","                add_column("
"0","                        subject = subject, .before = ""condition"""
"0","                ) %>%"
"0","                mutate("
"0","                        subject = as.factor(subject),"
"0","                        pairType = as.factor(pairType),"
"0","                        condition = as.factor(condition)"
"0","                        )"
"0","}"
